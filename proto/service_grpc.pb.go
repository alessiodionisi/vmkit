// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMKitClient is the client API for VMKit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMKitClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (VMKit_ApplyClient, error)
}

type vMKitClient struct {
	cc grpc.ClientConnInterface
}

func NewVMKitClient(cc grpc.ClientConnInterface) VMKitClient {
	return &vMKitClient{cc}
}

func (c *vMKitClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (VMKit_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMKit_ServiceDesc.Streams[0], "/VMKit/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMKitApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMKit_ApplyClient interface {
	Recv() (*ApplyResponse, error)
	grpc.ClientStream
}

type vMKitApplyClient struct {
	grpc.ClientStream
}

func (x *vMKitApplyClient) Recv() (*ApplyResponse, error) {
	m := new(ApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VMKitServer is the server API for VMKit service.
// All implementations must embed UnimplementedVMKitServer
// for forward compatibility
type VMKitServer interface {
	Apply(*ApplyRequest, VMKit_ApplyServer) error
	mustEmbedUnimplementedVMKitServer()
}

// UnimplementedVMKitServer must be embedded to have forward compatible implementations.
type UnimplementedVMKitServer struct {
}

func (UnimplementedVMKitServer) Apply(*ApplyRequest, VMKit_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedVMKitServer) mustEmbedUnimplementedVMKitServer() {}

// UnsafeVMKitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMKitServer will
// result in compilation errors.
type UnsafeVMKitServer interface {
	mustEmbedUnimplementedVMKitServer()
}

func RegisterVMKitServer(s grpc.ServiceRegistrar, srv VMKitServer) {
	s.RegisterService(&VMKit_ServiceDesc, srv)
}

func _VMKit_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMKitServer).Apply(m, &vMKitApplyServer{stream})
}

type VMKit_ApplyServer interface {
	Send(*ApplyResponse) error
	grpc.ServerStream
}

type vMKitApplyServer struct {
	grpc.ServerStream
}

func (x *vMKitApplyServer) Send(m *ApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VMKit_ServiceDesc is the grpc.ServiceDesc for VMKit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMKit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VMKit",
	HandlerType: (*VMKitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _VMKit_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
